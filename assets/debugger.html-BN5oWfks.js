import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as p,f as h,g as i,h as l,i as a,j as e,r as d,o as r}from"./app-DkX4gzyB.js";const k={};function c(g,s){const n=d("RouteLink");return r(),p("div",null,[s[5]||(s[5]=h(`<h1 id="silly-debugger" tabindex="-1"><a class="header-anchor" href="#silly-debugger"><span>silly.debugger</span></a></h1><p>交互式Lua调试器，支持断点、单步执行、变量查看、堆栈回溯等功能，可在运行时对Lua代码进行调试。</p><h2 id="模块导入" tabindex="-1"><a class="header-anchor" href="#模块导入"><span>模块导入</span></a></h2><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> debugger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">require</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;silly.debugger&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api"><span>API</span></a></h2><h3 id="debugger-start-read-write" tabindex="-1"><a class="header-anchor" href="#debugger-start-read-write"><span>debugger.start(read, write)</span></a></h3><p>启动调试器会话。</p><ul><li><strong>参数</strong>: <ul><li><code>read</code>: <code>function() -&gt; string|nil</code> - 读取函数，返回一行输入，或nil表示连接断开</li><li><code>write</code>: <code>function(data: string|table)</code> - 写入函数，将数据发送给客户端</li></ul></li><li><strong>返回值</strong>: <code>string|nil</code> - 调试会话结束信息，或nil表示出错</li><li><strong>说明</strong>: <ul><li>调试器是独占的，同一时间只能有一个调试会话</li><li>调试器会hook所有活跃的协程</li><li>退出调试器后，所有hook会被清除</li></ul></li></ul><h2 id="调试命令" tabindex="-1"><a class="header-anchor" href="#调试命令"><span>调试命令</span></a></h2><p>进入调试器后，可以使用以下命令：</p><h3 id="h-help" tabindex="-1"><a class="header-anchor" href="#h-help"><span>h (help)</span></a></h3><p>显示命令帮助。</p><ul><li><strong>语法</strong>: <code>h</code></li></ul><h3 id="b-breakpoint" tabindex="-1"><a class="header-anchor" href="#b-breakpoint"><span>b (breakpoint)</span></a></h3><p>设置断点。</p><ul><li><strong>语法</strong>: <code>b [filename] [line]</code></li><li><strong>参数</strong>: <ul><li><code>filename</code>: <code>string</code> (可选) - 文件名，默认使用当前文件</li><li><code>line</code>: <code>integer</code> - 行号</li></ul></li><li><strong>返回</strong>: 断点ID（如 <code>$1</code>, <code>$2</code>）</li><li><strong>示例</strong>:</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>debugger&gt; b main.lua 42</span></span>
<span class="line"><span>Breakpoint $1 at file:main.lua, line:42</span></span>
<span class="line"><span></span></span>
<span class="line"><span>debugger&gt; b 50</span></span>
<span class="line"><span>Breakpoint $2 at file:main.lua, line:50</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="d-delete" tabindex="-1"><a class="header-anchor" href="#d-delete"><span>d (delete)</span></a></h3><p>删除断点。</p><ul><li><strong>语法</strong>: <code>d [breakpoint_id]</code></li><li><strong>参数</strong>: <ul><li><code>breakpoint_id</code>: <code>integer</code> (可选) - 断点ID，省略则删除所有断点</li></ul></li><li><strong>示例</strong>:</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>debugger&gt; d 1</span></span>
<span class="line"><span>Delete breakpoint $1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>debugger&gt; d</span></span>
<span class="line"><span>Delete breakpoint $ALL</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="n-next" tabindex="-1"><a class="header-anchor" href="#n-next"><span>n (next)</span></a></h3><p>单步执行（越过函数调用）。</p><ul><li><strong>语法</strong>: <code>n</code></li><li><strong>说明</strong>: <ul><li>执行当前行，如果有函数调用，不会进入函数内部</li><li>只有在断点暂停时可用</li></ul></li></ul><h3 id="s-step" tabindex="-1"><a class="header-anchor" href="#s-step"><span>s (step)</span></a></h3><p>单步执行（步入函数调用）。</p><ul><li><strong>语法</strong>: <code>s</code></li><li><strong>说明</strong>: <ul><li>执行当前行，如果有函数调用，会进入函数内部</li><li>只有在断点暂停时可用</li></ul></li></ul><h3 id="c-continue" tabindex="-1"><a class="header-anchor" href="#c-continue"><span>c (continue)</span></a></h3><p>继续执行程序。</p><ul><li><strong>语法</strong>: <code>c</code></li><li><strong>说明</strong>: <ul><li>继续执行直到遇到下一个断点</li><li>只有在断点暂停时可用</li></ul></li></ul><h3 id="p-print" tabindex="-1"><a class="header-anchor" href="#p-print"><span>p (print)</span></a></h3><p>打印变量的值。</p><ul><li><strong>语法</strong>: <code>p &lt;variable_name&gt;</code></li><li><strong>参数</strong>: <ul><li><code>variable_name</code>: <code>string</code> - 变量名</li></ul></li><li><strong>说明</strong>: <ul><li>按顺序查找：局部变量 → upvalue → 全局变量</li><li>支持打印表、字符串、数字等所有类型</li><li>只有在断点暂停时可用</li></ul></li><li><strong>示例</strong>:</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>debugger&gt; p user_id</span></span>
<span class="line"><span>Param $1 user_id = 12345</span></span>
<span class="line"><span></span></span>
<span class="line"><span>debugger&gt; p config</span></span>
<span class="line"><span>Upvalue $1 config = {[&#39;host&#39;] = &#39;localhost&#39;,[&#39;port&#39;] = 8080,}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>debugger&gt; p print</span></span>
<span class="line"><span>Global $_ENV print = function: 0x12345678</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bt-backtrace" tabindex="-1"><a class="header-anchor" href="#bt-backtrace"><span>bt (backtrace)</span></a></h3><p>打印当前协程的堆栈回溯。</p><ul><li><strong>语法</strong>: <code>bt</code></li><li><strong>说明</strong>: <ul><li>显示完整的调用栈</li><li>只有在断点暂停时可用</li></ul></li></ul><h3 id="q-quit" tabindex="-1"><a class="header-anchor" href="#q-quit"><span>q (quit)</span></a></h3><p>退出调试器。</p><ul><li><strong>语法</strong>: <code>q</code></li><li><strong>说明</strong>: <ul><li>清除所有断点</li><li>恢复所有协程的正常执行</li><li>关闭调试会话</li></ul></li></ul><h2 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例"><span>使用示例</span></a></h2><h3 id="示例1-通过console启动调试器" tabindex="-1"><a class="header-anchor" href="#示例1-通过console启动调试器"><span>示例1：通过console启动调试器</span></a></h3><p><code>silly.console</code> 模块内置了DEBUG命令来启动调试器：</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">require</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;silly.console&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;127.0.0.1:8888&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Console started, use &#39;telnet 127.0.0.1 8888&#39; and type &#39;DEBUG&#39; to start debugger&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过telnet连接并启动调试器：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ telnet 127.0.0.1 8888</span></span>
<span class="line"><span>console&gt; debug</span></span>
<span class="line"><span></span></span>
<span class="line"><span>debugger&gt; h</span></span>
<span class="line"><span>List of commands:</span></span>
<span class="line"><span>b: Insert a break point [b &#39;filename linenumber&#39;]</span></span>
<span class="line"><span>d: Delete a break point [d &#39;breakpoint id&#39;]</span></span>
<span class="line"><span>n: Step next line, it will over the call [n]</span></span>
<span class="line"><span>s: Step next line, it will into the call [s]</span></span>
<span class="line"><span>c: Continue program being debugged [c]</span></span>
<span class="line"><span>p: Print variable include local/up/global values [p name]</span></span>
<span class="line"><span>bt: Print backtrace of all stack frames [bt]</span></span>
<span class="line"><span>q: Quit debug mode [q]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例2-设置断点并调试" tabindex="-1"><a class="header-anchor" href="#示例2-设置断点并调试"><span>示例2：设置断点并调试</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>debugger&gt; b main.lua 100</span></span>
<span class="line"><span>Breakpoint $1 at file:main.lua, line:100</span></span>
<span class="line"><span></span></span>
<span class="line"><span>debugger&gt; c</span></span>
<span class="line"><span>(程序继续运行直到断点...)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>debugger main.lua main.lua:100&gt; p request</span></span>
<span class="line"><span>Param $1 request = {[&#39;method&#39;] = &#39;GET&#39;,[&#39;path&#39;] = &#39;/api/users&#39;,}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>debugger main.lua main.lua:100&gt; bt</span></span>
<span class="line"><span>stack traceback:</span></span>
<span class="line"><span>        [C]: in function &#39;breakin&#39;</span></span>
<span class="line"><span>        main.lua:100: in function &#39;handle_request&#39;</span></span>
<span class="line"><span>        main.lua:50: in function &lt;main.lua:45&gt;</span></span>
<span class="line"><span>        ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>debugger main.lua main.lua:100&gt; n</span></span>
<span class="line"><span>(执行下一行)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>debugger main.lua main.lua:101&gt; s</span></span>
<span class="line"><span>(步入函数)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>debugger utils.lua utils.lua:25&gt; p data</span></span>
<span class="line"><span>Param $1 data = &#39;hello world&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>debugger utils.lua utils.lua:25&gt; c</span></span>
<span class="line"><span>(继续执行)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例3-自定义调试接口" tabindex="-1"><a class="header-anchor" href="#示例3-自定义调试接口"><span>示例3：自定义调试接口</span></a></h3><p>可以为自定义协议实现调试接口：</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> silly</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">require</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;silly&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> debugger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">require</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;silly.debugger&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tcp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">require</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;silly.net.tcp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 启动调试服务器</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tcp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">listen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;127.0.0.1:9999&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">fd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Debugger connected:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    -- 定义读写函数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    local</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tcp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">readline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">fd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    local</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        tcp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">fd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    -- 启动调试会话</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">debugger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> then</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">        print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Debug session ended:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    else</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">        print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Debug session error&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    tcp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">fd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Debugger listening on 127.0.0.1:9999&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例4-调试定时任务" tabindex="-1"><a class="header-anchor" href="#示例4-调试定时任务"><span>示例4：调试定时任务</span></a></h3><p>假设有定时任务代码：</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">require</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;silly.time&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> timer_task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> do</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">        print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Timer tick:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        -- 想在这里设置断点</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">silly</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fork</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">timer_task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调试步骤：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>debugger&gt; b timer.lua 7</span></span>
<span class="line"><span>Breakpoint $1 at file:timer.lua, line:7</span></span>
<span class="line"><span></span></span>
<span class="line"><span>debugger&gt; c</span></span>
<span class="line"><span>(等待定时器触发...)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>debugger timer.lua timer.lua:7&gt; p count</span></span>
<span class="line"><span>Param $1 count = 5</span></span>
<span class="line"><span></span></span>
<span class="line"><span>debugger timer.lua timer.lua:7&gt; n</span></span>
<span class="line"><span>(执行下一行)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>debugger timer.lua timer.lua:8&gt; c</span></span>
<span class="line"><span>(继续执行)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例5-查看表结构" tabindex="-1"><a class="header-anchor" href="#示例5-查看表结构"><span>示例5：查看表结构</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>debugger&gt; p config</span></span>
<span class="line"><span>Upvalue $1 config = {</span></span>
<span class="line"><span>  [&#39;server&#39;] = {</span></span>
<span class="line"><span>    [&#39;host&#39;] = &#39;localhost&#39;,</span></span>
<span class="line"><span>    [&#39;port&#39;] = 8080,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  [&#39;database&#39;] = {</span></span>
<span class="line"><span>    [&#39;host&#39;] = &#39;db.example.com&#39;,</span></span>
<span class="line"><span>    [&#39;name&#39;] = &#39;mydb&#39;,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例6-调试网络请求处理" tabindex="-1"><a class="header-anchor" href="#示例6-调试网络请求处理"><span>示例6：调试网络请求处理</span></a></h3><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tcp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">require</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;silly.net.tcp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tcp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">listen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.0.0.0:8080&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">fd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tcp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">fd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    -- 在这里设置断点检查接收到的数据</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">process_request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    tcp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">fd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    tcp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">fd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调试：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>debugger&gt; b handler.lua 5</span></span>
<span class="line"><span>Breakpoint $1 at file:handler.lua, line:5</span></span>
<span class="line"><span></span></span>
<span class="line"><span>debugger&gt; c</span></span>
<span class="line"><span>(等待客户端连接...)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>debugger handler.lua handler.lua:5&gt; p data</span></span>
<span class="line"><span>Param $1 data = &#39;GET /api/users HTTP/1.1\\r\\n...&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>debugger handler.lua handler.lua:5&gt; p addr</span></span>
<span class="line"><span>Param $2 addr = &#39;192.168.1.100:54321&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>debugger handler.lua handler.lua:5&gt; s</span></span>
<span class="line"><span>(步入 process_request 函数)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现细节" tabindex="-1"><a class="header-anchor" href="#实现细节"><span>实现细节</span></a></h2><h3 id="hook机制" tabindex="-1"><a class="header-anchor" href="#hook机制"><span>Hook机制</span></a></h3><p>调试器使用Lua的debug hook机制实现：</p><ul><li><strong>call hook</strong>: 检测函数调用，判断是否需要启用line hook</li><li><strong>line hook</strong>: 检查每行代码，判断是否命中断点</li><li><strong>return hook</strong>: 跟踪调用栈深度</li></ul><h3 id="断点检测" tabindex="-1"><a class="header-anchor" href="#断点检测"><span>断点检测</span></a></h3><p>断点通过以下方式检测：</p><ol><li>检查源文件名是否匹配（支持后缀匹配）</li><li>检查行号是否在函数定义范围内</li><li>检查当前执行行是否等于断点行</li></ol><h3 id="协程管理" tabindex="-1"><a class="header-anchor" href="#协程管理"><span>协程管理</span></a></h3><ul><li>调试器会hook所有活跃的协程</li><li>当创建新协程时，自动添加hook</li><li>当协程结束时，自动移除hook</li><li>使用 <code>silly.task_hook()</code> 实现协程生命周期监听</li></ul><h3 id="锁定线程" tabindex="-1"><a class="header-anchor" href="#锁定线程"><span>锁定线程</span></a></h3><p>当断点触发时：</p><ul><li>当前协程被&quot;锁定&quot;（暂停执行）</li><li>其他协程继续正常运行</li><li>只有锁定的协程可以使用 <code>n</code>/<code>s</code>/<code>c</code>/<code>p</code>/<code>bt</code> 命令</li><li>命令提示符显示当前文件和行号</li></ul><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2><div class="hint-container warning"><p class="hint-container-title">性能影响</p><p>调试器会显著降低程序性能，因为需要hook每次函数调用和行执行。不要在生产环境中启用调试器。</p></div><div class="hint-container warning"><p class="hint-container-title">并发限制</p><p>同一时间只能有一个调试会话。如果已有调试器运行，新的调试请求会被拒绝。</p></div><div class="hint-container tip"><p class="hint-container-title">断点生效时机</p><p>设置断点后需要执行 <code>c</code> 命令才能生效。断点在函数下次调用时才会被检查。</p></div><div class="hint-container tip"><p class="hint-container-title">文件名匹配</p><p>断点的文件名支持后缀匹配，所以 <code>b main.lua 10</code> 可以匹配 <code>/path/to/main.lua</code>。</p></div><h2 id="限制" tabindex="-1"><a class="header-anchor" href="#限制"><span>限制</span></a></h2><ol><li><strong>C函数</strong>: 无法调试C函数内部，只能看到C函数的调用</li><li><strong>尾调用</strong>: 尾调用优化可能导致堆栈信息不完整</li><li><strong>字符串转义</strong>: 变量值中的特殊字符会被转义显示（如 <code>\\n</code>, <code>\\x00</code>）</li><li><strong>循环引用</strong>: 表的循环引用只显示第一次，避免无限递归</li><li><strong>大表</strong>: 非常大的表可能导致输出过多，建议只查看特定字段</li></ol><h2 id="与console的集成" tabindex="-1"><a class="header-anchor" href="#与console的集成"><span>与console的集成</span></a></h2><p><code>silly.console</code> 模块内置了 <code>DEBUG</code> 命令：</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">fd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    local</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tcp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">readline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">fd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    local</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">dat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tcp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">fd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> debugger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这使得通过console进入调试器非常方便。</p><h2 id="参见" tabindex="-1"><a class="header-anchor" href="#参见"><span>参见</span></a></h2>`,86)),i("ul",null,[i("li",null,[l(n,{to:"/reference/console.html"},{default:e(()=>s[0]||(s[0]=[a("silly.console")])),_:1}),s[1]||(s[1]=a(" - 控制台命令行"))]),i("li",null,[l(n,{to:"/reference/logger.html"},{default:e(()=>s[2]||(s[2]=[a("silly.logger")])),_:1}),s[3]||(s[3]=a(" - 日志系统"))]),s[4]||(s[4]=i("li",null,[i("a",{href:"https://www.lua.org/manual/5.4/manual.html#6.10",target:"_blank",rel:"noopener noreferrer"},"Lua Debug Library"),a(" - Lua调试库文档")],-1))])])}const A=t(k,[["render",c],["__file","debugger.html.vue"]]),b=JSON.parse('{"path":"/reference/debugger.html","title":"silly.debugger","lang":"zh-CN","frontmatter":{"title":"silly.debugger","icon":"bug","category":["API参考"],"tag":["工具","调试","开发"],"description":"silly.debugger 交互式Lua调试器，支持断点、单步执行、变量查看、堆栈回溯等功能，可在运行时对Lua代码进行调试。 模块导入 API debugger.start(read, write) 启动调试器会话。 参数: read: function() -> string|nil - 读取函数，返回一行输入，或nil表示连接断开 write:...","head":[["meta",{"property":"og:url","content":"https://gotocoding.com/silly/reference/debugger.html"}],["meta",{"property":"og:site_name","content":"参考手册"}],["meta",{"property":"og:title","content":"silly.debugger"}],["meta",{"property":"og:description","content":"silly.debugger 交互式Lua调试器，支持断点、单步执行、变量查看、堆栈回溯等功能，可在运行时对Lua代码进行调试。 模块导入 API debugger.start(read, write) 启动调试器会话。 参数: read: function() -> string|nil - 读取函数，返回一行输入，或nil表示连接断开 write:..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-05T04:27:07.000Z"}],["meta",{"property":"article:tag","content":"工具"}],["meta",{"property":"article:tag","content":"调试"}],["meta",{"property":"article:tag","content":"开发"}],["meta",{"property":"article:modified_time","content":"2025-10-05T04:27:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"silly.debugger\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-05T04:27:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"重归混沌\\",\\"url\\":\\"https://blog.gotocoding.com\\"}]}"]]},"git":{"createdTime":1759638427000,"updatedTime":1759638427000,"contributors":[{"name":"findstr","username":"findstr","email":"findstr@sina.com","commits":1,"url":"https://github.com/findstr"}]},"readingTime":{"minutes":5.98,"words":1795},"filePathRelative":"reference/debugger.md","localizedDate":"2025年10月5日","autoDesc":true}');export{A as comp,b as data};
