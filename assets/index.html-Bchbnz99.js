import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as a,f as r,o as n}from"./app--SF938OM.js";const o={};function i(s,e){return n(),a("div",null,e[0]||(e[0]=[r('<h1 id="原理解析" tabindex="-1"><a class="header-anchor" href="#原理解析"><span>原理解析</span></a></h1><p>深入理解 Silly 框架的设计理念和核心概念。</p><h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h2><ul><li><strong>理解导向</strong>: 解释&quot;为什么&quot;而不只是&quot;怎么做&quot;</li><li><strong>架构视角</strong>: 从宏观角度理解框架设计</li><li><strong>最佳实践</strong>: 了解设计背后的考量</li></ul><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h2><h3 id="协程调度模型" tabindex="-1"><a class="header-anchor" href="#协程调度模型"><span>协程调度模型</span></a></h3><p>Silly 采用单线程事件循环 + 协程的并发模型，实现高性能异步IO。</p><h3 id="线程架构" tabindex="-1"><a class="header-anchor" href="#线程架构"><span>线程架构</span></a></h3><p>框架使用4线程架构：Worker、Socket、Timer、Monitor。</p><h3 id="消息系统" tabindex="-1"><a class="header-anchor" href="#消息系统"><span>消息系统</span></a></h3><p>所有线程间通信通过无锁消息队列实现。</p><h2 id="内容即将推出" tabindex="-1"><a class="header-anchor" href="#内容即将推出"><span>内容即将推出</span></a></h2><p>我们正在编写更多原理解析文档，敬请期待！</p><h2 id="相关资源" tabindex="-1"><a class="header-anchor" href="#相关资源"><span>相关资源</span></a></h2><ul><li><a href="/tutorials/" target="_blank" rel="noopener noreferrer">教程</a> - 实践中学习</li><li><a href="/reference/" target="_blank" rel="noopener noreferrer">API参考</a> - 查找具体实现</li></ul>',15)]))}const c=t(o,[["render",i],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/concepts/","title":"原理解析","lang":"zh-CN","frontmatter":{"title":"原理解析","index":true,"icon":"lightbulb","category":["概念"],"description":"原理解析 深入理解 Silly 框架的设计理念和核心概念。 特点 理解导向: 解释\\"为什么\\"而不只是\\"怎么做\\" 架构视角: 从宏观角度理解框架设计 最佳实践: 了解设计背后的考量 核心概念 协程调度模型 Silly 采用单线程事件循环 + 协程的并发模型，实现高性能异步IO。 线程架构 框架使用4线程架构：Worker、Socket、Timer、Mon...","head":[["meta",{"property":"og:url","content":"https://gotocoding.com/silly/concepts/"}],["meta",{"property":"og:site_name","content":"参考手册"}],["meta",{"property":"og:title","content":"原理解析"}],["meta",{"property":"og:description","content":"原理解析 深入理解 Silly 框架的设计理念和核心概念。 特点 理解导向: 解释\\"为什么\\"而不只是\\"怎么做\\" 架构视角: 从宏观角度理解框架设计 最佳实践: 了解设计背后的考量 核心概念 协程调度模型 Silly 采用单线程事件循环 + 协程的并发模型，实现高性能异步IO。 线程架构 框架使用4线程架构：Worker、Socket、Timer、Mon..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-05T04:27:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-05T04:27:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原理解析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-05T04:27:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"重归混沌\\",\\"url\\":\\"https://blog.gotocoding.com\\"}]}"]]},"git":{"createdTime":1759638427000,"updatedTime":1759638427000,"contributors":[{"name":"findstr","username":"findstr","email":"findstr@sina.com","commits":1,"url":"https://github.com/findstr"}]},"readingTime":{"minutes":0.66,"words":198},"filePathRelative":"concepts/README.md","localizedDate":"2025年10月5日","autoDesc":true}');export{c as comp,d as data};
